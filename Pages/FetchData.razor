@page "/fetchdata"

@using Blazor.Demo.Data
@inject WeatherForecastService ForecastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<WeatherForecastService>
<h1>Weather forecast</h1>

<AuthorizeView>
    <Authorized>
            <p>Hello, @context.User.Identity.Name </p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(()=>EditForecast(forecast))">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <p>
        <button class="btn btn-primary"
                @onclick="AddNewForecast">
            Add New Forecast
        </button>
    </p>
    <TableTemplate Items="forecasts" Context="forecast">
        <TableHeader>
            <th>Date of Forecast</th>
            <th>Summary</th>
            <th></th>
        </TableHeader>
        <RowTemplate>
            <td><b>@forecast.Date.ToLongDateString()</b></td>
            <td><i>@forecast.Summary</i></td>
            <td>
                <button class="btn btn-primary"
                        @onclick="(()=>EditForecast(forecast))">
                        Edit
                </button>
            </td>
        </RowTemplate>
    </TableTemplate>
    <FormDialog Show="ShowNewRecordPopup"
                objWeatherForecast="objWeatherForecast"
                DeleteForecast="DeleteForecast"
                ClosePopup="ClosePopup"
                SaveForecast="SaveForecast">
                <HeaderContent>
                    <h3 class="modal-title"
                        style="color:darkred">
                        Create Forecast
                        </h3>
                </HeaderContent>
                </FormDialog>
    <FormDialog Show="ShowEditRecordPopup"
                objWeatherForecast="objWeatherForecast"
                DeleteForecast="DeleteForecast"
                ClosePopup="ClosePopup"
                SaveForecast="SaveForecast">
                <HeaderContent>
                    <h3 class="modal-title"
                        style="color:darkred">
                        Edit Forecast
                        </h3>
                </HeaderContent>

                </FormDialog>
     

}
</Authorized>

<NotAuthorized>
    <p>You're not signed in.</p>
</NotAuthorized>

</AuthorizeView>
@code {
    bool ShowNewRecordPopup =false;
    bool ShowEditRecordPopup = false;

    [CascadingParameter]
    private Task<AuthenticationState> authentication {get;set;}
    private List<WeatherForecast> forecasts;

        List<WeatherForecastOptions> SummaryOptions = new List<WeatherForecastOptions>(){
            new WeatherForecastOptions(){ OptionName = "Select...",OptionValue=" "},
            new WeatherForecastOptions(){ OptionName = "Hot...",OptionValue="Hot"},
            new WeatherForecastOptions(){ OptionName = "Mild...",OptionValue="Mild"},
            new WeatherForecastOptions(){ OptionName = "Cold...",OptionValue="Cold"},
            };

    WeatherForecast objWeatherForecast = new WeatherForecast();
    void ClosePopup(){
    
        ShowNewRecordPopup = false;
        ShowEditRecordPopup = false;
    }

    void AddNewForecast(){
        objWeatherForecast = new WeatherForecast();
        objWeatherForecast.Id = 0;
        ShowNewRecordPopup = true;
    }

    void EditForecast(WeatherForecast weatherForecast){
        objWeatherForecast = weatherForecast;
        ShowEditRecordPopup = true;
    }

    async Task DeleteForecast(){
        ShowNewRecordPopup = false;
        ShowEditRecordPopup = false;

        var user = (await authentication).User;
        var result = @Service.DeleteForecastAsync(objWeatherForecast);
        forecasts = await @Service.GetForecastAsync(user.Identity.Name);
    }

    async Task SaveForecast(){
         ShowNewRecordPopup = false;
        ShowEditRecordPopup = false;
        var user = (await authentication).User;
        if(objWeatherForecast.Id == 0){
            WeatherForecast objNewWeatherForecast = new WeatherForecast();
            objNewWeatherForecast.Date = DateTime.Now;
            objNewWeatherForecast.Summary = objWeatherForecast.Summary;
            objNewWeatherForecast.TemperatureC = Convert.ToInt32(objWeatherForecast.TemperatureC);
            objNewWeatherForecast.TemperatureF = Convert.ToInt32(objWeatherForecast.TemperatureF);
            objNewWeatherForecast.Username = user.Identity.Name;
            var result = @Service.CreateForecastAsync(objNewWeatherForecast);
        }
        else{
            var result = @Service.UpdateForecastAsync(objWeatherForecast);
        }
        forecasts = await ForecastService.GetForecastAsync(user.Identity.Name);
    }
    protected override async Task OnInitializedAsync()
    {
        var user = (await authentication).User;
        forecasts = await ForecastService.GetForecastAsync(user.Identity.Name);
    }
}
