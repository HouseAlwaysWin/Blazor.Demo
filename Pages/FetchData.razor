@page "/fetchdata"

@using Blazor.Demo.Data
@inject WeatherForecastService ForecastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<WeatherForecastService>
<h1>Weather forecast</h1>

<AuthorizeView>
    <Authorized>
            <p>Hello, @context.User.Identity.Name </p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(()=>EditForecast(forecast))">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <p>
        <button class="btn btn-primary"
                @onclick="AddNewForecast">
            Add New Forecast
        </button>
    </p>
    @if(ShowPopup){
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit Forecast</h3>
                        <button type="button" class="close"
                                onclick="ClosePopup">
                                <span aria-hidden="true"> </span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input class="form-control" type="text"
                                placeholder="Celsius forecast"
                                @bind="objWeatherForecast.TemperatureC"/>
                        <input class="form-control" type="text"
                                placeholder="Fahrenheit forecast"
                                @bind="objWeatherForecast.TemperatureF"/>
                         <input class="form-control" type="text"
                                placeholder="Summary"
                                @bind="objWeatherForecast.Summary"/>
                        <br />
                        <button class="btn btn-primary"
                                @onclick="SaveForecast">
                                Save
                                </button>
                        @if(objWeatherForecast.Id >0){
                            <button class="btn btn-primary"
                                    @onclick="DeleteForecast">
                                    Delete
                                    </button>
                        }
                    </div>
                </div>
            </div>
        </div>

    }

}
</Authorized>

<NotAuthorized>
    <p>You're not signed in.</p>
</NotAuthorized>

</AuthorizeView>
@code {

    [CascadingParameter]
    private Task<AuthenticationState> authentication {get;set;}
    private List<WeatherForecast> forecasts;

    WeatherForecast objWeatherForecast = new WeatherForecast();
    bool ShowPopup = false;
    void ClosePopup(){
        ShowPopup = false;
    }

    void AddNewForecast(){
        objWeatherForecast = new WeatherForecast();
        objWeatherForecast.Id = 0;
        ShowPopup = true;
    }

    void EditForecast(WeatherForecast weatherForecast){
        objWeatherForecast = weatherForecast;
        ShowPopup = true;
    }

    async Task DeleteForecast(){
        ShowPopup = false;
        var user = (await authentication).User;
        var result = @Service.DeleteForecastAsync(objWeatherForecast);
        forecasts = await @Service.GetForecastAsync(user.Identity.Name);
    }

    async Task SaveForecast(){
        ShowPopup = false;
        var user = (await authentication).User;
        if(objWeatherForecast.Id == 0){
            WeatherForecast objNewWeatherForecast = new WeatherForecast();
            objNewWeatherForecast.Date = DateTime.Now;
            objNewWeatherForecast.Summary = objWeatherForecast.Summary;
            objNewWeatherForecast.TemperatureC = Convert.ToInt32(objWeatherForecast.TemperatureC);
            objNewWeatherForecast.TemperatureF = Convert.ToInt32(objWeatherForecast.TemperatureF);
            objNewWeatherForecast.Username = user.Identity.Name;
            var result = @Service.CreateForecastAsync(objNewWeatherForecast);
        }
        else{
            var result = @Service.UpdateForecastAsync(objWeatherForecast);
        }
        forecasts = await ForecastService.GetForecastAsync(user.Identity.Name);
    }
    protected override async Task OnInitializedAsync()
    {
        var user = (await authentication).User;
        forecasts = await ForecastService.GetForecastAsync(user.Identity.Name);
    }
}
